#!/bin/bash

# script for capturing network traffic on each network segment.
# capturing is done using tshark and parsed to json to integrate it with Elasticsearch

{% if savefile != "not" %}

# define number of interfaces to loop through
{% set brDMZinterfaces = 3 %}
{% set brLAN1interfaces = NumberofLANclients|int + staticinterfaces_brLan1|int %}
{% set brLAN2interfaces = 2 %}
{% set routerWANeth123 = 3 %}

# tshark capture on the router-WAN internet and router-LAN1 interfaces
{% for i in range(1, routerWANeth123 +1 ) %}
{% if savefile == "json" or savefile == "both" %}
ip netns exec clab-{{networkname}}-router-WAN tshark -i eth{{i}} -T ek >> /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/router-WAN-eth123.json &
{% endif %}
{% if savefile == "pcap" or savefile == "both" %}
touch /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/router-WAN-eth{{i}}.pcap
ip netns exec clab-{{networkname}}-router-WAN tshark -F pcap -i eth{{i}} -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/router-WAN-eth{{i}}.pcap &
{% endif %}
{% endfor %}

# tshark capture on br-DMZ interfaces 
{% for i in range(1, brDMZinterfaces +1 ) %}
{% if savefile == "json" or savefile == "both" %}
ip netns exec clab-{{networkname}}-br-DMZ tshark -i eth{{i}} -T ek >> /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-DMZ.json &
{% endif %}
{% if savefile == "pcap" or savefile == "both" %}
touch /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-DMZ-eth{{i}}.pcap
ip netns exec clab-{{networkname}}-br-DMZ tshark -F pcap -i eth{{i}} -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-DMZ-eth{{i}}.pcap &
{% endif %}
{% endfor %}

# tshark capture on br-LAN1 interfaces 
{% for i in range(1, brLAN1interfaces +1 ) %}
{% if savefile == "json" or savefile == "both" %}
ip netns exec clab-{{networkname}}-br-LAN1 tshark -i eth{{i}} -T ek >> /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-LAN1.json &
{% endif %}
{% if savefile == "pcap" or savefile == "both" %}
touch /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-LAN1-eth{{i}}.pcap
ip netns exec clab-{{networkname}}-br-LAN1 tshark -F pcap -i eth{{i}} -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-LAN1-eth{{i}}.pcap &
{% endif %}
{% endfor %}

# tshark capture on br-LAN2 interfaces 
{% for i in range(1, brLAN2interfaces +1 ) %}
{% if savefile == "json" or savefile == "both" %}
ip netns exec clab-{{networkname}}-br-LAN2 tshark -i eth{{i}} -T ek >> /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-LAN2.json &
{% endif %}
{% if savefile == "pcap" or savefile == "both" %}
touch /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-LAN2-eth{{i}}.pcap
ip netns exec clab-{{networkname}}-br-LAN2 tshark -F pcap -i eth{{i}} -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/br-LAN2-eth{{i}}.pcap &
{% endif %}
{% endfor %}

{% endif %}



SECONDS=0

{% if timer != "0" %}

echo "voor de if timer" >> /etc/containerlab/captures/test.txt

timeset={{timer}}

if [ $timerset == *"m"* ]
then
    giventime=$( echo $timerset | sed 's/m//g')
    topotimer=$(($giventime * 60))
    echo "topotimer min: $topotimer" >> /etc/containerlab/captures/test.txt
elif [ $timerset == *"h"* ]
then
    giventime=$( echo $timerset | sed 's/h//g')
    topotimer=$(($giventime * 3600))
    echo "topotimer hours: $topotimer" >> /etc/containerlab/captures/test.txt
elif [ $timerset == *"d"* ]
then
    giventime=$( echo $timerset | sed 's/d//g')
    topotimer=$(($giventime * 86400))
    echo "topotimer days: $topotimer" >> /etc/containerlab/captures/test.txt
fi
{% endif %}

while true
do

    echo "seconds: $SECONDS" >> /etc/containerlab/captures/test.txt

    processesROUTERwan=$(pgrep -f router-WAN-eth)
    processesDMZ=$(pgrep -f br-DMZ-eth)
    processesLAN1=$(pgrep -f br-LAN1-eth)
    processesLAN2=$(pgrep -f br-LAN2-eth)

    if !( [[ $processesROUTERwan ]] && [[ $processesDMZ ]] && [[ $processesLAN1 ]] && [[ $processesLAN2 ]] )
    then
        mergecap /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/*.pcap -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/merged.pcap
        echo "proces kill" >> /etc/containerlab/captures/test.txt
        break
    fi

    {% if timer != "0" %}

    if [ $SECONDS -ge $topotimer ]
    then
        echo "timer expired" >> /etc/containerlab/captures/test.txt

        clab destroy --topo /etc/containerlab/{{ networkname }}/network.yml
        {% if savefile == "pcap" or savefile == "both" %}
        mergecap /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/*.pcap -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/merged.pcap
        {% endif %}
        break
    fi
    {% endif %}

    {% if capturelimitMB|int != 0  %}
    capturefoldersize=$(du "/etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}" | awk '{print $1;}')
    KBtoMB=1000
    capturefolderMB=$((capturefoldersize / KBtoMB))

    echo "capturefolder: $capturefolderMB" >> /etc/containerlab/captures/test.txt

    if [ $capturefolderMB -ge {{ capturelimitMB|int }} ]
    then

        echo "capturelimit bereikt" >> /etc/containerlab/captures/test.txt

        clab destroy --topo /etc/containerlab/{{ networkname }}/network.yml
        {% if savefile == "pcap" or savefile == "both" %}
        mergecap /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/*.pcap -w /etc/containerlab/captures/{{networkname}}-{{ ansible_date_time.iso8601 }}/merged.pcap
        {% endif %}
        break
    fi
    {% endif %}

done
